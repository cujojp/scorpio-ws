
// The Grid
// --------------------------------------------
//  .d8888b.          d8b      888
// d88P  Y88b         Y8P      888
// 888    888                  888
// 888        888d888 888  .d88888
// 888  88888 888P"   888 d88" 888
// 888    888 888     888 888  888
// Y88b  d88P 888     888 Y88b 888
//  "Y8888P88 888     888  "Y88888
// --------------------------------------------

// Table columns
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() {
  margin-left: $gridGutterWidth * -1;
  @include clearfix();
}
@mixin makeColumn($columns: 1, $offset: 0) {
  float: left;
  margin-left: ($gridColumnWidth * $offset) + ($gridGutterWidth * ($offset - 1)) + ($gridGutterWidth * 2);
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}



// ----------------------------------
// FLUID GRID
// ----------------------------------
@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth, $numColumns: $gridColumns, $whichGrid: "", $mobileGridClass: "") {

  $spanName: "span" !default;
  @if ($whichGrid == "m"){ $spanName: "m-span"; }

  @if ($whichGrid == "m"){
    #{$mobileGridClass}.grid.show-grid [class*="m-span"]{
    background:rgba(77, 77, 141, 0.7) !important;
    }
  }

  $gridName: "grid" !default;
  @if ($whichGrid == "slim"){ $gridName: "slimgrid"; }
  @else if ($whichGrid == "slim5"){ $gridName: "slimgrid5"; }

  @if ($whichGrid == "m"){
    #{$mobileGridClass}.grid,
    #{$mobileGridClass}.slimgrid,
    #{$mobileGridClass}.slimgrid5 {
      @include clearfix();

      [class*=#{$spanName}] {
        // @include input-block-level();
        display: block;
        width: auto;
        float: left;
        margin-left: $fluidGridGutterWidth;
        *margin-left: $fluidGridGutterWidth - (.5 / $gridWidth * 100px * 1%);

        &:first-child{
          margin-left: 0;
        }
        @if ($whichGrid == "m"){
          &.m-span-new-row{
            margin-left: 0;
          }
        }
      }
      // generate .spanX and .offsetX
      @include grid-fluid-span-x($numColumns, $fluidGridColumnWidth, $fluidGridGutterWidth, $whichGrid);
      @include grid-fluid-offset-x($numColumns, $fluidGridColumnWidth, $fluidGridGutterWidth, $whichGrid);
    }
  } @else {
    .#{$gridName},
    .grid .#{$gridName} {
      @include clearfix();

      [class*=#{$spanName}] {
        // @include input-block-level();
        display: block;
        width: auto;
        float: left;
        margin-left: $fluidGridGutterWidth;
        *margin-left: $fluidGridGutterWidth - (.5 / $gridWidth * 100px * 1%);

        &:first-child{
          margin-left: 0;
        }
        @if ($whichGrid == "m"){
          &.m-span-new-row{
            margin-left: 0;
          }
        }
      }
      // generate .spanX and .offsetX
      @include grid-fluid-span-x($numColumns, $fluidGridColumnWidth, $fluidGridGutterWidth, $whichGrid);
      @include grid-fluid-offset-x($numColumns, $fluidGridColumnWidth, $fluidGridGutterWidth, $whichGrid);
    }
  }
}

@mixin grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth, $whichGrid) {

  $spanName: "span" !default;
  @if ($whichGrid == "m"){ $spanName: "m-span"; }

  @while $gridColumns > 0 {
    .#{$spanName}#{$gridColumns} { @include grid-fluid-span($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    $gridColumns: $gridColumns - 1;
  }

  // TODO: THIS SHOULD WORK (CJM)
  // .grid .#{$spanName}#{$gridColumns} {
  //  margin-left:0; // if you're using a full-width column (span12 in a 12-column grid) it should never have a left margin.
  // }

}

@mixin grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth, $whichGrid) {

  $offsetName: "offset" !default;
  @if ($whichGrid == "m"){ $offsetName: "m-offset"; }

  @while $gridColumns > 0 {
    .#{$offsetName}#{$gridColumns} { @include grid-fluid-offset($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    .#{$offsetName}#{$gridColumns}:first-child { @include grid-fluid-offset-first-child($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }

    @if ($whichGrid == "m"){
      .#{$offsetName}#{$gridColumns}.m-span-new-row { @include grid-fluid-offset-first-child($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    }

    $gridColumns: $gridColumns - 1;
  }
}
// @mixin grid-fluid-offset-x-reset($gridColumns, $whichGrid, $mobileGridClass) {

//  $offsetName: "offset" !default;
//  @if ($whichGrid == "m"){ $offsetName: "m-offset"; }

//  $gridName: "grid" !default;
//  @if ($whichGrid == "slim"){ $gridName: "slimgrid"; }
//  @else if ($whichGrid == "slim5"){ $gridName: "grid5, .slimgrid5"; }
//  .#{$gridName} {
//      @while $gridColumns > 0 {

//          // this first one was disabled, I'm not sure why.
//          // .offset#{$gridColumns} { @include grid-fluid-offset($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }

//          // this second one was enabled but I overrode it (below) with a cross between the one above, and the custom $offsetName for mobile.
//          // .#{$offsetName}#{$gridColumns}:first-child {
//          //  margin-left:0;
//          // }
//          .#{$offsetName}#{$gridColumns}:first-child { @include grid-fluid-offset($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }

//          @if ($whichGrid == "m"){
//              .#{$offsetName}#{$gridColumns}.m-span-new-row { @include grid-fluid-offset($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth); }
//          }

//          $gridColumns: $gridColumns - 1;
//      }
//  }
// }

@mixin grid-fluid-span($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
  *width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridWidth * 100px * 1%);
}
@mixin grid-fluid-offset($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth * 2);
  *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridWidth * 100px * 1%) + ($fluidGridGutterWidth * 2) - (.5 / $gridWidth * 100px * 1%);
}
@mixin grid-fluid-offset-first-child($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth);
  *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridWidth * 100px * 1%) + $fluidGridGutterWidth - (.5 / $gridWidth * 100px * 1%);
}

// full-bleed-padded is necessary when you need the element to be 100% wide (full-bleed) for background or borders,
// but need to have padding inside so its content still has the appearance of margins. It should be used inside of
// a .container or .grid and affects all "span" elements inside of it. It's used on the footer, to be able to extend
// the borders the full width of the window, but still have the regular padding.
@mixin container-m-full-bleed-padded-children-at( $bp, $containerOrGridOrBoth ){

  width: auto;

  [class*="span"]{
  @if ($containerOrGridOrBoth == "container"){

    @if ($bp == "767" or $bp == "567"){
    padding-left: (100% - $mobileContainerWidth480)/2;
    padding-right: (100% - $mobileContainerWidth480)/2;
    } @else if ($bp == "479"){
    padding-left: (100% - $mobileContainerWidth320)/2;
    padding-right: (100% - $mobileContainerWidth320)/2;
    }

  } @else if ($containerOrGridOrBoth == "grid"){

    @if ($bp == "767" or $bp == "567"){
    padding-left: (100% - $mobileGridWidth480)/2;
    padding-right: (100% - $mobileGridWidth480)/2;
    } @else if ($bp == "479"){
    padding-left: (100% - $mobileGridWidth320)/2;
    padding-right: (100% - $mobileGridWidth320)/2;
    }

  } @else if ($containerOrGridOrBoth == "both"){
    $containerMargin:0%;
    $gridMargin:0%;

    @if ($bp == "767" or $bp == "567"){
    $containerMargin: (100% - $mobileContainerWidth480)/2;
    $gridMargin: (100% - $mobileGridWidth480)/2;
    } @else if ($bp == "479"){
    $containerMargin: (100% - $mobileContainerWidth320)/2;
    $gridMargin: (100% - $mobileGridWidth320)/2;
    }
    padding-left: $containerMargin + $gridMargin;
    padding-right: $containerMargin + $gridMargin;

  }
  }
}

@mixin no-grid( $overrideClass: "" ) {

  // Make all grid-sized elements block level again
  #{$overrideClass}.grid [class*="span"],
  #{$overrideClass}.grid [class*="offset"],
  #{$overrideClass}.grid [class*="span"]:first-child,
  #{$overrideClass}.grid [class*="offset"]:first-child,

  #{$overrideClass}.slimgrid [class*="span"],
  #{$overrideClass}.slimgrid [class*="offset"],
  #{$overrideClass}.slimgrid5 [class*="span"],
  #{$overrideClass}.slimgrid5 [class*="offset"],

  #{$overrideClass}.grid [class*="m-span"],
  #{$overrideClass}.grid [class*="m-offset"],
  #{$overrideClass}.grid [class*="m-span"]:first-child,
  #{$overrideClass}.grid [class*="m-offset"]:first-child,

  #{$overrideClass}.grid [class*="m-span"].m-span-new-row,
  #{$overrideClass}.grid [class*="m-offset"].m-span-new-row,

  // #{$overrideClass}.grid-px-width [class*="span"],
  // #{$overrideClass}.grid-px-width [class*="offset"]
  {
  float: none;
  display: block;
  width: auto; // 100%
  margin-left: 0;
  }



  // ----------------------------------------------------------------------------
  // This is all from Bootstrap - we may be able to strip some of this out:
  // ----------------------------------------------------------------------------

  // Undo negative margin on fixed width grids and thumbnails
  #{$overrideClass}.grid-px-width,
  .thumbnails {
  margin-left: 0;
  }
  .thumbnails > li {
  float: none;
  margin-left: 0; // Reset the default margin for all li elements when no .span* classes are present
  }

  // Make inputs and span* classes full width
  #{$overrideClass} .input-large,
  #{$overrideClass} .input-xlarge,
  #{$overrideClass} .input-xxlarge,
  #{$overrideClass} input[class*="span"],
  #{$overrideClass} select[class*="span"],
  #{$overrideClass} textarea[class*="span"],
  #{$overrideClass} .uneditable-input {
  @include input-block-level();
  }
  // But don't let it screw up prepend/append inputs
  #{$overrideClass} .input-prepend input,
  #{$overrideClass} .input-append input,
  #{$overrideClass} .input-prepend input[class*="span"],
  #{$overrideClass} .input-append input[class*="span"] {
  display: inline-block; // redeclare so they don't wrap to new lines
  width: auto;
  }
  #{$overrideClass} .controls-row [class*="span"] + [class*="span"] {
  margin-left: 0;
  }

  // Modals
  #{$overrideClass}.modal,
  #{$overrideClass} .modal {
  position: fixed;
  top:   20px;
  left:  20px;
  right: 20px;
  width: auto;
  margin: 0;
  &.fade.in { top: auto; }
  }

  #{$overrideClass}.takeover,
  #{$overrideClass} .takeover {
  top:   0;
  left:  0;
  right: 0;

  &.fade.in { top: 0; }
  }

  // Reset horizontal dl
  #{$overrideClass} .dl-horizontal {
  dt {
    float: none;
    clear: none;
    width: auto;
    text-align: left;
  }
  dd {
    margin-left: 0;
  }
  }

  // Update checkboxes for iOS
  input[type="checkbox"],
  input[type="radio"] {
  border: 1px solid #ccc;
  }

  // ----------------------------------------------------------------------------
  // end Bootstrap stuff that we might be able to strip out
  // ----------------------------------------------------------------------------


  #{$overrideClass}.grid.show-grid [class*="span"],
  #{$overrideClass}.grid.show-grid [class*="offset"],
  #{$overrideClass}.grid.show-grid [class*="m-span"],
  #{$overrideClass}.grid.show-grid [class*="m-offset"]{
  background:rgba(102,85,85,0.7) !important;
  }
} // end @mixin no-grid

// ----------------------------------
// FIXED GRID - this should only be used for the docs now.
// ----------------------------------
@mixin grid-core($gridColumnWidth, $gridGutterWidth, $numColumns: $gridColumns) {

  [class*="span"] {
    float: left;
    min-height: 1px; // prevent collapsing columns
    margin-left: $gridGutterWidth;
  }

  // Set the container width, and override it for fixed navbars in media queries
  .container-px-width,
  .navbar-static-top .container-px-width,
  .navbar-fixed-top .container-px-width,
  .navbar-fixed-bottom .container-px-width {
    @include grid-core-span($numColumns, $gridColumnWidth, $gridGutterWidth);
  }

  // generate .spanX and .offsetX
  @include grid-core-span-x($numColumns, $gridColumnWidth, $gridGutterWidth);
  @include grid-core-offset-x($numColumns, $gridColumnWidth, $gridGutterWidth);
}

@mixin grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @while $gridColumns > 0 {
    .span#{$gridColumns} { @include grid-core-span($gridColumns, $gridColumnWidth, $gridGutterWidth)}
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @while $gridColumns > 0 {
    .offset#{$gridColumns} { @include grid-core-offset($gridColumns, $gridColumnWidth, $gridGutterWidth); }
    $gridColumns: $gridColumns - 1;
  }
}

@mixin grid-core-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core-offset($columns, $gridColumnWidth, $gridGutterWidth) {
  margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}



// ----------------------------------
// INPUT GRID - I believe the grid-input is just for fixed-width-grids.
// ----------------------------------
@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    margin-left: 0; // override margin-left from core grid system
  }

  // Space grid-sized controls properly if multiple per line
  .controls-row [class*="span"] + [class*="span"] {
    margin-left: $gridGutterWidth;
  }
}
